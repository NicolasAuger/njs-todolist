Deadline:
    ☐ Lundi 5 Décembre 2016 @Critical

___________________________________________________________
BDD NoSQL:
<<<<<<< HEAD
    ☐ Token with Redis (Ioredis) @Optional
    ☐ Database MongoDB (Mongoose) @Needed

___________________________________________________________
Users:
    ☐ Create User Table in Database
    ☐ DL old Skeleton
    ☐ Add TD2 elements
    ☐ Add Password attribute
    ☐ Method GET
    ☐ Method PUT
    ☐ Method POST
    ☐ Method DELETE
    ☐ Manage JSON @Needed

    ☐ Use bcrypt module to hash password
    ☐ Add cookie-parser middleware

___________________________________________________________
Session:
    ☐ Create Sessions Table in Database (userId, accessToken, createdAt, expiresAt)
    ☐ Create REST "/sessions" resssource
        ☐ GET --> Display user/pass form
        ☐ POST --> Create accessToken and save it in database
            ☐ Set a cookie in HTML
            ☐ Return {accessToken: XXXX} in json

        ☐ DELETE --> Delete accessToken

    ☐ Create a new middleware for authentication
        ☐ HTML --> check AccessToken cookie
        ☐ JSON --> check X-AccessToken header
        ☐ No accessToken --> error for JSON, redicrect to authentication html page

___________________________________________________________
Todos:
    ☐ Create Todos Table in Database
    ☐ Create REST "/todos" resssource (userId, message, createdAt, updatedAt, completedAt)
    ☐ Home page redirects to /Todos
    ☐ Each User can see his Todos, check his todos,  complete his todos and move it to the end of the list

___________________________________________________________
Team:
    ☐ A user can be in a team or not
    ☐ A user has an option "See my todos / See team's todos"
    ☐ Todos can be given to an other user from the same team
    ☐ Todos can be completed by every user of the team

___________________________________________________________
Visuels:
    ☐ User
    ☐ Users
    ☐ Todos                 @Boostrap??
    ☐ Teams

___________________________________________________________
Notation:
    ☐ NoSQL @Needed
    ☐ Respect what is asked
    ☐ Fonctionnal
    ☐ API Rest (Manage JSON)
    ☐ Clean and detailled
    ☐ Asynchrone
    ☐ Security + Error management
    ☐ Database and ExpressJs
    ☐ Authentication
    ☐ Import teams notion
    ☐ Use Git for code versionning
    ☐ Security against SQL injections
=======
    ☐ Token with Redis (Ioredis) @Optional @notdone
    ✔ Database MongoDB (Mongoose) @Needed @done(2016-11-18 16:01) @project(BDD NoSQL)

___________________________________________________________
Users:
    ✔ Create User Table in Database @done(2016-11-14 14:06) @project(Users)
    ✔ DL old Skeleton @done(2016-11-14 13:24) @project(Users)
    ✔ Add TD2 elements @done(2016-11-14 13:24) @project(Users)
    ✔ Add Password attribute @done(2016-11-14 14:06) @project(Users)
    ✔ Method GET @done(2016-11-18 16:00) @project(Users)
    ✔ Method PUT @done(2016-11-18 16:00) @project(Users)
    ✔ Method POST @done(2016-11-18 16:00) @project(Users)
    ✔ Method DELETE @done(2016-11-18 16:00) @project(Users)
    ✔ Manage JSON @Needed @done(2016-11-18 16:00) @project(Users)

    ✔ Use bcrypt module to hash password @done(2016-11-24 18:05)
    ✔ Add cookie-parser middleware @done(2016-11-28 22:43)

___________________________________________________________
Session:
    ☐ Create Sessions Table in Database (userId, accessToken, createdAt, expiresAt) @notdone
    ☐ Create REST "/sessions" resssource @notdone
    ✔ Create a new middleware for authentication @done(2016-12-05 02:57) @project(Session)

    ✔ Create Login Form which create a session @done(2016-12-05 02:53) @project(Session)
    ✔ Dashboard for user session with all his actions @done(2016-12-05 02:55) @project(Session)
        ✔ See his todos @done(2016-12-05 02:55) @project(Session)
        ✔ See his personnal infos @done(2016-12-05 02:55) @project(Session)
        ✔ Update his personnal infos @done(2016-12-05 02:55) @project(Session)
        ✔ Leave his team @done(2016-12-05 02:55) @project(Session)
        ✔ Join a team @done(2016-12-05 02:55) @project(Session)
        ✔ See all users @done(2016-12-05 02:55) @project(Session)
        ✔ See all team @done(2016-12-05 02:55) @project(Session)


___________________________________________________________
Todos:
    ✔ Create Todos Table in Database @done(2016-11-24 16:20) @project(Todos)
    ✔ Create REST "/todos" resssource (userId, message, createdAt, updatedAt, completedAt) @done(2016-11-24 16:20) @project(Todos)
        ✔ Method GET @done(2016-11-24 16:20) @project(Todos)
        ✔ Method PUT @done(2016-11-24 16:20) @project(Todos)
        ✔ Method POST @done(2016-11-24 16:20) @project(Todos)
        ✔ Method DELETE @done(2016-11-24 16:20) @project(Todos)
    ✔ Home page redirects to /Todos @done(2016-11-24 16:20) @project(Todos)
    ✔ Complete todos and move them to the end of the list @done(2016-11-24 16:21) @project(Todos)
    ✔ A user can see only his own todos @done(2016-11-30 02:31) @project(Todos)

___________________________________________________________
Team:
    ✔ A user can be in a team or not @done(2016-12-02 18:20) @project(Team)
    ✔ A user can leave his team @done(2016-12-05 02:56) @project(Team)
    ✔ A user can join a team when he wants @done(2016-12-05 02:56) @project(Team)
    ☐ A user can see all todos of all the team @notdone
    ☐ A user can assign his todos to another user of his team @notdone

___________________________________________________________
Visuels:
    ✔ User @done(2016-12-05 02:59) @project(Visuels)
    ✔ Users @done(2016-11-24 16:19) @project(Visuels)
    ✔ Todos @done(2016-11-24 16:19) @project(Visuels)
    ✔ Teams @done(2016-12-05 02:59) @project(Visuels)
    ✔ Session Dashboard @done(2016-12-05 02:59) @project(Visuels)

___________________________________________________________
Notation:
    ✔ NoSQL @Needed @done(2016-11-18 16:05) @project(Notation)
    ✔ Respect what is asked @done(2016-12-05 02:58) @project(Notation) @quitdone
    ✔ Fonctionnal @done(2016-12-05 02:58) @project(Notation)
    ✔ API Rest (Manage JSON) @done(2016-11-24 16:19) @project(Notation)
    ✔ Clean and detailled @done(2016-12-05 02:58) @project(Notation)
    ✔ Asynchrone @done(2016-12-05 02:58) @project(Notation)
    ✔ Security  @done(2016-12-05 02:58) @project(Notation)
    ✔ Comment all the code @done(2016-12-05 02:59) @project(Notation)
    ☐ Error management @not @really @done
    ✔ Database and ExpressJs @done(2016-11-18 16:05) @project(Notation)
    ✔ Authentication @done(2016-11-30 02:31) @project(Notation)
    ✔ Import teams notion @halfdone @done(2016-12-05 02:59) @project(Notation)
    ✔ Use Git for code versionning @done(2016-11-18 16:05) @project(Notation)
    ✔ Security against SQL injections @done(2016-11-24 16:20) @project(Notation)
>>>>>>> d5c9f585a20012fe1819cc3f95209da6e36f0e3f
